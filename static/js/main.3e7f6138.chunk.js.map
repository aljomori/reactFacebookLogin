{"version":3,"sources":["serviceWorker.js","firebaseConfig.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseAppAuth","firebase","firebaseConfig","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","user","signOut","signInWithGoogle","useState","fb","setFb","copyFb","setCopyFb","copyF","setCopyF","className","autoLoad","fields","callback","object","cssClass","icon","style","maxWidth","fontSize","marginBottom","text","JSON","stringify","onCopy","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0DCRSC,G,MAVA,CACXC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,MC8CnB,IAAMC,EA7CcC,gBAAuBC,GA6CPC,OAE9BC,EAAY,CAChBC,eAAgB,IAAIJ,OAAcK,oBAErBC,cAAiB,CAC9BH,YACAJ,mBAFaO,EAhDf,YAAiD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,iBAAmB,EAC1BC,mBAAS,IADiB,mBACvCC,EADuC,KACnCC,EADmC,OAElBF,oBAAS,GAFS,mBAEvCG,EAFuC,KAE/BC,EAF+B,OAGpBJ,oBAAS,GAHW,mBAGvCK,EAHuC,KAGhCC,EAHgC,KAK9C,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACIpB,MAAM,kBACNqB,UAAU,EACVC,OAAO,qBACPC,SAAU,SAACC,GAAUT,EAAMS,IAC3BC,SAAS,2BACTC,KAAK,gBAET,yBAAKC,MAAO,CAACC,SAAU,MAAOC,SAAU,OAAQC,aAAc,SAC5D,kBAAC,IAAD,CAAkBV,UAAU,OAAQW,KAAMC,KAAKC,UAAUnB,GAAKoB,OAAQ,kBAAIjB,GAAU,KAClF,6BAAMe,KAAKC,UAAUnB,KAEtBE,EAAO,iDAA4B,IAIpCN,EACM,4BAAQyB,QAASxB,GAAjB,YACA,4BAAQwB,QAASvB,GAAjB,uBAGNF,EACK,yBAAKiB,MAAO,CAACC,SAAU,MAAOC,SAAU,SACvC,kBAAC,IAAD,CAAiBT,UAAU,OAAOW,KAAMC,KAAKC,UAAUvB,GAAOwB,OAAQ,kBAAIf,GAAS,KACjF,6BAAMa,KAAKC,UAAUvB,KAEtBQ,EAAM,mDAA+B,IAEtC,6BAAK,oD,MCzCrBkB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SHyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3e7f6138.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const config = {\n    apiKey: \"AIzaSyAu5Vdumx8Ft3ezwghLDLcn0uffd7MLoBM\",\n    authDomain: \"tourism-d603b.firebaseapp.com\",\n    databaseURL: \"https://tourism-d603b.firebaseio.com\",\n    projectId: \"tourism-d603b\",\n    storageBucket: \"tourism-d603b.appspot.com\",\n    messagingSenderId: \"951487490542\",\n    appId: \"1:951487490542:web:aa0769da62e8752bc446ff\",\n    measurementId: \"G-VGX1HDP8KC\"\n};\nexport default config;\n","import React, {useState} from 'react';\nimport FacebookLogin from \"react-facebook-login\";\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport withFirebaseAuth from 'react-with-firebase-auth'\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseConfig from './firebaseConfig';\nimport './App.css';\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nfunction App({user, signOut, signInWithGoogle}) {\n  const [fb, setFb] = useState({});\n  const [copyFb, setCopyFb] = useState(false);\n  const [copyF, setCopyF] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FacebookLogin\n            appId=\"414897609429813\"\n            autoLoad={false}\n            fields=\"name,email,picture\"\n            callback={(object)=>{setFb(object)}}\n            cssClass=\"my-facebook-button-class\"\n            icon=\"fa-facebook\"\n        />\n        <div style={{maxWidth: '50%', fontSize: '12px', marginBottom: '20px'}}>\n          <CopyToClipboard  className=\"copy\"  text={JSON.stringify(fb)} onCopy={()=>setCopyFb(true)}>\n            <pre>{JSON.stringify(fb)}</pre>\n          </CopyToClipboard>\n          {copyFb?<div>Facebook Copiado</div>:''}\n        </div>\n\n        {\n          user\n              ? <button onClick={signOut}>Sign out</button>\n              : <button onClick={signInWithGoogle}>Sign in with Google</button>\n        }\n        {\n          user\n              ?<div style={{maxWidth: '50%', fontSize: '12px'}}>\n                <CopyToClipboard className=\"copy\" text={JSON.stringify(user)} onCopy={()=>setCopyF(true)}>\n                  <pre>{JSON.stringify(user)}</pre>\n                </CopyToClipboard>\n                {copyF?<span>Firebase Copiado!</span>:''}\n              </div>\n              : <div><p>Please sign in.</p></div>\n        }\n\n      </header>\n    </div>\n  );\n}\nconst firebaseAppAuth = firebaseApp.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}